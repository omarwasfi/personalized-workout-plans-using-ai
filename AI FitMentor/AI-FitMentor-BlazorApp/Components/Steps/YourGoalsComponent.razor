@using Ai_FitMentor_Shared.Requests
@using AI.FitMentor.BlazorApp.Services.Interfaces
@using Ai_FitMentor_Shared
@inject IAIFitMentorService AiFitMentorService

<Container >
    <Validations Model="PersonalGoalsDto" @ref="validationsHorizontalFormRef" Mode="ValidationMode.Auto" ValidateOnLoad="false">
        <Validation>
            <Field>
                <FieldLabel >What is your goals</FieldLabel>
                <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is9.OnDesktop">
                    <TextEdit Placeholder="Feel free.." @bind-Text="@PersonalGoalsDto.MyGoals" />
                </FieldBody>
                <FieldHelp>ex. my goal is to be stronger and get in shape</FieldHelp>
            </Field>
        </Validation>
        
        <Validation>
            <Field>
                <FieldLabel >Workout type</FieldLabel>
                <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is9.OnDesktop">
                    <Select @bind-SelectedValue="@PersonalGoalsDto.WorkoutType">
                        @foreach (WorkoutTypeDataModel workoutTypeDataModel in this.APIWorkoutTypes)
                        {
                            <SelectItem Value="workoutTypeDataModel">@workoutTypeDataModel.Name</SelectItem>

                        }
                    </Select>
                            
                </FieldBody>
                <FieldHelp></FieldHelp>
            </Field>
        </Validation>
        
                               <Field>
                                    <FieldLabel ColumnSize="ColumnSize.IsFull">
                                        @if (PersonalGoalsDto != null && PersonalGoalsDto.TargetedMuscles != null
                                             && PersonalGoalsDto.TargetedMuscles.Any())
                                        {
                                            <div>Focus on: (@PersonalGoalsDto.TargetedMuscles.Count)
                                                @foreach (MusclesDataModel musclesDataModel in PersonalGoalsDto.TargetedMuscles)
                                                {
                                                    @(musclesDataModel.Name + ", ")
                                                }
                                            </div>
                        
                                        }
                                        else
                                        {
                                            <div>Focus on: </div>
                             
                                        }
                                    </FieldLabel>
                                    <FieldBody ColumnSize="ColumnSize.IsFull.OnTablet.Is9.OnDesktop">
                                                            
                                        @foreach (MuscleContainer muscleContainer in this.muscleContainers)
                                        {
                                                            
                                                            
                                            @if (muscleContainer.Selected)
                                            {
                                                <Badge Style="cursor: pointer;" Margin="Margin.Is1"  Color="Color.Primary" @onclick="@(() => MuscleClicked(muscleContainer))">@muscleContainer.Muscle.Name</Badge>
                                                            
                                            }
                                            else
                                            {
                                                <Badge Style="cursor: pointer;" Margin="Margin.Is1" Color="Color.Secondary" @onclick="@(() => MuscleClicked(muscleContainer))">@muscleContainer.Muscle.Name</Badge>
                                                            
                                            }
                                        }
                                                            
                                    </FieldBody>
                                    <FieldHelp></FieldHelp>
                                </Field>
 
        

            <Fields Margin="Margin.Is4.Is0.Is0.Is0">
                <Field>
                    <FieldLabel>Gender</FieldLabel>
                    <Select TValue="string" @bind-SelectedValue="@PersonalGoalsDto.Gender" >
                        <SelectItem Value="@("Male")" >Male</SelectItem>
                        <SelectItem Value="@("Female")" >Female</SelectItem>
                    </Select>
                    
                </Field>
                <Validation>
                    <Field>
                        <FieldLabel>weight</FieldLabel>
                        <TextEdit Placeholder="" @bind-Text="@PersonalGoalsDto.Weight" />
                        <FieldHelp>ex. 70kg</FieldHelp>
                    
                    </Field>
                </Validation>
               
                <Validation>
                    <Field>
                        <FieldLabel>Height</FieldLabel>
                        <TextEdit Placeholder="" @bind-Text="@PersonalGoalsDto.Height" />
                        <FieldHelp>ex. 165 cm</FieldHelp>
                    
                    </Field>
                </Validation>
               
            </Fields>
            
       
    
        <Blazorise.ValidationSummary @ref="@ValidationSummary" />
    
        <Field JustifyContent="JustifyContent.End" TextAlignment="TextAlignment.End">
            <FieldBody ColumnSize="ColumnSize.Is9.Is3.WithOffset">
                <Button Color="Color.Primary" Loading="submitButtonLoading" Clicked="SubmitHorizontalForm"> Next</Button>
    
            </FieldBody>
        </Field>
                    
    </Validations>



</Container>


@code {
    
    [Parameter]
    public EventCallback<PersonalGoalsDto> PersonalGoalsSelectedEventCallback { get; set; }

    private PersonalGoalsDto PersonalGoalsDto { get; set; } = new PersonalGoalsDto(){TargetedMuscles = new List<MusclesDataModel>()};
    private bool submitButtonLoading { get; set; }    
    
    Validations validationsHorizontalFormRef;
    Blazorise.ValidationSummary ValidationSummary = new Blazorise.ValidationSummary();

    List<WorkoutTypeDataModel> APIWorkoutTypes = new List<WorkoutTypeDataModel>();
    List<MusclesDataModel> APIMuscles = new List<MusclesDataModel>();

    List<MuscleContainer> muscleContainers = new List<MuscleContainer>();
    
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            APIWorkoutTypes = await AiFitMentorService.GetTypes();
            PersonalGoalsDto.WorkoutType = APIWorkoutTypes.First();

            APIMuscles = await AiFitMentorService.GetMuscles();
            foreach (var musclesDataModel in APIMuscles)
            {
                muscleContainers.Add(new MuscleContainer(){Muscle = musclesDataModel});
            }

            PersonalGoalsDto.Gender = "Male";
            

        }
        catch (Exception ex)
        {

        }



        await base.OnInitializedAsync();
    }
    
    async Task SubmitHorizontalForm()
    {
        submitButtonLoading = true;

        ValidationSummary.Errors = new string[1];
        try
        {
            if (PersonalGoalsDto.TargetedMuscles.Any())
            {
                if(await validationsHorizontalFormRef.ValidateAll())
                {

                    await PersonalGoalsSelectedEventCallback.InvokeAsync(this.PersonalGoalsDto);
                }
            }
            else
            {
                ValidationSummary.Errors = new string[1] { "Selected the muscles that you want to focus on. Or choose full body" };

            }


        }
        catch (Exception ex)
        {
            ValidationSummary.Errors = new string[1] { ex.Message };

        }

        if (await validationsHorizontalFormRef.ValidateAll())
        {
            await validationsHorizontalFormRef.ClearAll();

        }

        submitButtonLoading = false;

    }
    
    
    private async Task MuscleClicked(MuscleContainer MuscleContainer)
    {

        MuscleContainer.Selected = !MuscleContainer.Selected;

        List<MusclesDataModel> selectedMuscles = new List<MusclesDataModel>();
        
        foreach(MuscleContainer muscleContainer in this.muscleContainers.Where(muscleContainer=> muscleContainer.Selected == true))
        {
            selectedMuscles.Add(muscleContainer.Muscle);
        }

        this.PersonalGoalsDto.TargetedMuscles = selectedMuscles;
        this.StateHasChanged();
    }
    
    public class MuscleContainer
    {
        public MusclesDataModel Muscle { get; set; }
        public bool Selected { get; set; } = false;
    }

}